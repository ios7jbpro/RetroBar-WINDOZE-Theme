<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <system:Boolean x:Key="InvertSystemNotifyIcons">False</system:Boolean>
    
    <SolidColorBrush x:Key="ButtonHighlight" Color="#786d7a" />
    <SolidColorBrush x:Key="ButtonInnerHighlight" Color="#786d7a" />
    <SolidColorBrush x:Key="ButtonLight" Color="#dfdfdf" />
    <SolidColorBrush x:Key="ButtonFace" Color="#453f47" />
    <SolidColorBrush x:Key="ButtonShadow" Color="#808080" />
    <SolidColorBrush x:Key="ButtonDarkShadow" Color="#4b21c8" />
    <SolidColorBrush x:Key="ButtonFlashingFace" Color="#000080" />

    <SolidColorBrush x:Key="ButtonForeground" Color="#6200ff" />
    <SolidColorBrush x:Key="ButtonFlashingForeground" Color="#ab9bad" />
    <SolidColorBrush x:Key="ClockForeground" Color="#FFFFFF" />
    
    <SolidColorBrush x:Key="ToolTipBackground" Color="#FFFFE1" />
    <SolidColorBrush x:Key="ToolTipForeground" Color="#000000" />

    <ToolTip x:Key="StartButtonTip" Content="{DynamicResource start_button_tip_98}" />
    <ToolTip x:Key="ShowDesktopButtonTip" Content="{DynamicResource show_desktop_tip_95}" />
    <Style TargetType="MenuItem"
           x:Key="ShowDesktopItem"
           BasedOn="{StaticResource ShowDesktopItem}">
        <Setter Property="Header"
                Value="{DynamicResource show_desktop_95}" />
    </Style>

    <Style TargetType="GroupBox"
           x:Key="Tray"
           BasedOn="{StaticResource Tray}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Border BorderThickness="0"
                            BorderBrush="{DynamicResource ButtonShadow}"
                            Margin="0,2"
                            x:Name="OuterTrayBorder">
                        <Border BorderThickness="0"
                                x:Name="InnerTrayBorder"
                                BorderBrush="{DynamicResource ButtonHighlight}"
                                Padding="2,0">
                            <Border BorderThickness="0,0,1,1"
                                    BorderBrush="{DynamicResource ButtonHighlight}">
                                <Border BorderThickness="1,1,0,0"
                                        BorderBrush="{DynamicResource ButtonShadow}"
                                        Background="{DynamicResource ButtonFace}"
                                        Padding="2">
                                    <ContentPresenter />
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsLocked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="OuterTrayBorder"
                                        Property="BorderThickness"
                                        Value="5,0,0,0" />
                                <Setter TargetName="InnerTrayBorder"
                                        Property="BorderThickness"
                                        Value="1,0,0,0" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsLocked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="OuterTrayBorder"
                                        Property="BorderThickness"
                                        Value="0,1,0,0" />
                                <Setter TargetName="OuterTrayBorder"
                                        Property="Margin"
                                        Value="2,0" />
                                <Setter TargetName="InnerTrayBorder"
                                        Property="BorderThickness"
                                        Value="0,1,0,0" />
                                <Setter TargetName="InnerTrayBorder"
                                        Property="Padding"
                                        Value="0,2" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton"
           x:Key="StartButton"
           BasedOn="{StaticResource StartButton}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource ClassicFocusVisual}" />
    </Style>

    <FontFamily x:Key="GlobalFontFamily">PixelMplus10</FontFamily>

    <Style TargetType="ToggleButton"
           x:Key="ShowDesktopButton"
           BasedOn="{StaticResource StartButton}">
        <Setter Property="Margin"
                Value="-2,0,2,0" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsChecked"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource CheckeredBackgroundAlt}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Horizontal">
                <DataTrigger.Setters>
                    <Setter Property="BorderThickness"
                            Value="0,0,0,1" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>